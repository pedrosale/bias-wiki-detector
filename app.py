import streamlit as st, pandas as pd
from src.wiki_fetch import buscar_artigos
from src.detector import analisar_artigos

st.set_page_config(page_title="Bias Wiki Detector", layout="wide")
st.title("üß† Bias Wiki Detector")

st.markdown("""
<div style="background-color:#f0f2f6;padding:10px;border-left:5px solid #999;">
O detector pesquisa at√© <b>50 artigos da Wikip√©dia</b> cujo t√≠tulo cont√©m o termo informado, 
consulta a <i>MediaWiki&nbsp;API</i> para obter a <b>data da √∫ltima edi√ß√£o</b> e analisa os <b>N artigos mais recentes</b>.<br>
‚ö†Ô∏è Se a data estiver indispon√≠vel para algum artigo, ele √© listado ap√≥s os que possuem data v√°lida.
</div>

<div style="margin-top:15px; margin-bottom:20px;">
<a href="https://github.com/pedrosale/bias-wiki-detector/blob/main/README.md" target="_blank">
Veja aqui as defini√ß√µes dos tipos de vi√©s analisados pela ferramenta</a>.
</div>



# Entrada
termo = st.text_input("üîç Termo de busca", value="intelig√™ncia artificial")
qtd   = st.number_input("üìÑ Defina N", 1, 50, 3)
executar = st.button("Analisar")

# Rodar an√°lise ou reutilizar cache
if "df_final" not in st.session_state or executar:
    with st.spinner("üîé Buscando artigos‚Ä¶"):
        df_raw = buscar_artigos(termo, qtd)

    if df_raw.empty:
        st.warning("Nenhum artigo encontrado com esse termo no t√≠tulo.")
        st.stop()

    st.success(f"{len(df_raw)} artigos encontrados.")
    st.dataframe(df_raw[["Artigo", "Link", "data_ultima_edicao"]], use_container_width=True)

    with st.spinner("ü§ñ Rodando an√°lise de vi√©s (OpenAI)‚Ä¶"):
        df_final = analisar_artigos(df_raw.head(qtd))

    st.session_state.df_final = df_final
    st.session_state.df_raw = df_raw

# Exibir resultado
if "df_final" in st.session_state:
    df_final = st.session_state.df_final
    df_raw = st.session_state.df_raw

    st.success("An√°lise conclu√≠da!")

    artigos = df_final["Artigo"].unique()
    escolhido = st.selectbox("üîé Selecione um artigo para ver a an√°lise completa:", artigos)

    df_artigo = df_final[df_final["Artigo"] == escolhido]
    link = df_artigo["Link"].iloc[0]
    st.markdown(f"### üìÑ [{escolhido}]({link})", unsafe_allow_html=True)

    for _, row in df_artigo.iterrows():
        st.markdown("---")
        col1, col2 = st.columns([1, 3])
        with col1:
            st.markdown("**üü• Trecho (Tendencioso)**")
            st.markdown(row.get("Trecho (Tendencioso)", ""))
            st.markdown("**üüß Opini√£o Disfar√ßada**")
            st.markdown(row.get("Trecho (Opini√£o disfar√ßada)", ""))
            st.markdown("**üü® Tema Ausente**")
            st.markdown(row.get("Tema ausente", ""))
        with col2:
            st.markdown("**Tipo de Vi√©s:** " + row.get("Tipo de Vi√©s", ""))
            st.markdown("**Explica√ß√£o (Vi√©s):** " + row.get("Explica√ß√£o (Vi√©s)", ""))
            st.markdown("**Reescrita (Vi√©s):** " + row.get("Reescrita (Vi√©s)", ""))
            st.markdown("**Motivo (Opini√£o):** " + row.get("Motivo (Opini√£o)", ""))
            st.markdown("**Reescrita (Opini√£o):** " + row.get("Reescrita (Opini√£o)", ""))
            st.markdown("**Import√¢ncia do Contraponto:** " + row.get("Import√¢ncia do Contraponto", ""))
            st.markdown("**Sugest√£o de Inclus√£o:** " + row.get("Sugest√£o de Inclus√£o", ""))

    csv = df_final.to_csv(index=False).encode("utf-8")
    st.download_button("‚¨áÔ∏è Baixar CSV", csv, "bias_report.csv", mime="text/csv")
